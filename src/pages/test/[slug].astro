---
import Layout from '../../layouts/Layout.astro';

export async function getStaticPaths() {
  const quizzes = import.meta.glob('../../data/test/**/*.json');
  const paths = [];
  
  for (const [path, loader] of Object.entries(quizzes)) {
    const quiz = await loader();
    // Extraemos solo el nombre del archivo, ignorando la estructura de carpetas
    const slug = path.split('/').pop().replace('.json', '');
    
    paths.push({
      params: { slug },
      props: { quiz }
    });
  }

  return paths;
}
const { quiz } = Astro.props;
const { slug } = Astro.params;

// Carga el cuestionario basado en el slug
// const quiz = await import(`../../data/test/${slug}.json`);



// Función para desordenar un array (Fisher-Yates Shuffle)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// Verifica si el cuestionario tiene la propiedad shuffle en true
const questions = quiz.shuffle ? shuffleArray([...quiz.questions]) : quiz.questions;

// Creamos una nueva lista de preguntas con opciones desordenadas
const questionsWithShuffledOptions = questions.map((question) => ({
  ...question,
  options: shuffleArray([...question.options]), // Solo desordenamos las respuestas
}));
// console.log('Quiz cargado:', { 
//   title: quiz.title, 
//   questionsCount: questions.length 
// }); // Log para depuración
---
<Layout>
  <h1>{quiz.title}</h1>
  <a href="/astrocuestion" class="back-link" title="Volver atrás">Volver atrás</a>

  <div class="counter">
    <span id="correctCount" class="correct">0</span> /
    <span id="incorrectCount" class="incorrect">0</span> /
    <span id="totalQuestions">{questionsWithShuffledOptions.length}</span>
  </div>
  
  <section class="zona_cuestionario">

 
  {questionsWithShuffledOptions.map((question, index) => (
    <div>
      <h2>{index + 1}. {question.question}</h2>
      <ul>
        {question.options.map((option, optionIndex) => (
          <li>
            <p 
              class="respuestaForm options"
              data-correct={option.isCorrect}
              data-hint={option.hint}
              data-question={index}
              >
              {option.text}
            </p>
            <div class="feedback"></div>
          </li>
        ))}
      </ul>
    </div>
  ))}

 </section>
<a href="/astrocuestion" class="back-link" title="Volver atrás">Volver atrás</a>
</Layout>

<style>
  h1 {
    color: #2c3e50;
    border-bottom: 2px solid #3498db;
    padding-bottom: 10px;
  }
  .question {
    background-color: #f9f9f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 20px;
    margin-bottom: 20px;
  }
  .options {
    display: grid;
    gap: 10px;
    cursor: pointer;
  }
  @media (min-width: 768px) {
    .options {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  label {
    display: flex;
    align-items: center;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  label:hover {
    background-color: #e8f4fd;
  }
  .options {
    margin-right: 10px;
    display: inline-block;
    border-radius: 5px;
    margin-bottom: 10px;
    transition: background-color 0.3s, transform 0.2s;
  }
  .options:hover{
    background-color: #e8f4fd;
    transform: translateY(-2px);
  }
  .submit-btn {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s;
  }
  .submit-btn:hover {
    background-color: #2980b9;
  }
.zona_cuestionario{
  border-bottom: 2px solid #3498db;
  margin-bottom: 1em;

}
  #correctCount{
    color: #16c60c;
  }
  #incorrectCount{
    color: #f03a17;
  }
  .back-link {
    display: inline-block;
    padding: 10px 20px;
    background-color: #3498db;
    color: white;
    text-decoration: none;
    border-radius: 5px;
    font-weight: bold;
    transition: background-color 0.3s, transform 0.2s;
    margin-bottom: 20px;
  }

  .back-link:hover {
    background-color: #2980b9;
    transform: translateY(-2px);
  }

  .back-link:active {
    transform: translateY(0);
  }
</style>

<script>
  // function handleOptionClick(isCorrect, hint) {
  //   if (isCorrect) {
  //     alert('¡Correcto!');
  //   } else {
  //     alert(`Incorrecto. Pista: ${hint}`);
  //   }
  // }
  const answeredQuestions = {};

  function handleOptionClick(button) {
    const isCorrect = button.dataset.correct === "true";
    const hint = button.dataset.hint;
    const questionNumber = button.dataset.question;

    const feedbackDiv = button.nextElementSibling; // Accede al <div> feedback al lado del botón
    if (isCorrect) {
      feedbackDiv.innerHTML = "<strong class='success'>¡Correcto! ✅</strong>";
    } else {
      feedbackDiv.innerHTML = `<span class='error'>❌ Incorrecto. Pista: ${hint}</span>`;
    }
    console.log(questionNumber)
    if (!answeredQuestions[questionNumber]) {
      // Actualiza los contadores solo si no se ha respondido antes
      if (isCorrect) {
        countAnsweredQuestions(document.getElementById("correctCount"));
      } else {
        countAnsweredQuestions(document.getElementById("incorrectCount"));
      }
      // Almacena la respuesta en el estado
      answeredQuestions[questionNumber] = questionNumber;
    }
  }

  function countAnsweredQuestions(element) {
     element.textContent = parseInt(element.textContent) + 1;
  }

  // Encuentra todos los botones con la clase `alert` en la página.
  const buttons = document.querySelectorAll('p.respuestaForm');

  // Maneja los clics en cada botón.
  buttons.forEach((button) => {
    button.addEventListener('click', () => {
      // handleOptionClick(button.dataset.correct === 'true', button.dataset.hint);
      handleOptionClick(button);

    });
  });
</script>
